// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: 4XDKe2Y2CSQJqugRctvMof
// Component: rPnlRZdYkTwYu
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import InputText from "../../InputText"; // plasmic-import: v0nNSTRV39/component
import Button from "../../Button"; // plasmic-import: JU1t0P9pFY/component

import { useScreenVariants as useScreenVariantsszbTUtTUfDw81Pi } from "../shared/PlasmicGlobalVariant__Screen"; // plasmic-import: szbTUtTUfDW81Pi/globalVariant

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_shared_css from "../shared/plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import projectcss from "./plasmic_landing_page_4_0_knowledge_management.module.css"; // plasmic-import: 4XDKe2Y2CSQJqugRctvMof/projectcss
import sty from "./PlasmicHomepage.module.css"; // plasmic-import: rPnlRZdYkTwYu/css

import Logosvg2Icon from "./icons/PlasmicIcon__Logosvg2"; // plasmic-import: 2t2oJ8UuJjzLT5/icon
import IconPlusIcon from "../shared/icons/PlasmicIcon__IconPlus"; // plasmic-import: B5QLKmr2tW/icon
import IconRightIcon from "../shared/icons/PlasmicIcon__IconRight"; // plasmic-import: v822ZhrBq/icon

export type PlasmicHomepage__VariantMembers = {};

export type PlasmicHomepage__VariantsArgs = {};
type VariantPropType = keyof PlasmicHomepage__VariantsArgs;
export const PlasmicHomepage__VariantProps = new Array<VariantPropType>();

export type PlasmicHomepage__ArgsType = {};
type ArgPropType = keyof PlasmicHomepage__ArgsType;
export const PlasmicHomepage__ArgProps = new Array<ArgPropType>();

export type PlasmicHomepage__OverridesType = {
  root?: p.Flex<"div">;
  row?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
  container?: p.Flex<"div">;
  halfBox?: p.Flex<"div">;
  h1?: p.Flex<"h1">;
  email1?: p.Flex<typeof InputText>;
  join1?: p.Flex<typeof Button>;
  text4?: p.Flex<"div">;
  text23?: p.Flex<"div">;
  rowProcess?: p.Flex<"div">;
  container3?: p.Flex<"div">;
  halfBox2?: p.Flex<"div">;
  halfBox13?: p.Flex<"div">;
  halfBox14?: p.Flex<"div">;
  row3?: p.Flex<"div">;
  container4?: p.Flex<"div">;
  halfBox4?: p.Flex<"div">;
  row6?: p.Flex<"div">;
  container7?: p.Flex<"div">;
  halfBox7?: p.Flex<"div">;
  row5?: p.Flex<"div">;
  container6?: p.Flex<"div">;
  halfBox6?: p.Flex<"div">;
  row11?: p.Flex<"div">;
  container12?: p.Flex<"div">;
  halfBox15?: p.Flex<"div">;
  row7?: p.Flex<"div">;
  container8?: p.Flex<"div">;
  halfBox8?: p.Flex<"div">;
  halfBox9?: p.Flex<"div">;
  row4?: p.Flex<"div">;
  container5?: p.Flex<"div">;
  halfBox5?: p.Flex<"div">;
  row10?: p.Flex<"div">;
  container11?: p.Flex<"div">;
  columns?: p.Flex<"div">;
  row2?: p.Flex<"div">;
  container2?: p.Flex<"div">;
  halfBox3?: p.Flex<"div">;
  row8?: p.Flex<"div">;
  container9?: p.Flex<"div">;
  halfBox10?: p.Flex<"div">;
  h4?: p.Flex<"h4">;
  email2?: p.Flex<typeof InputText>;
  join2?: p.Flex<typeof Button>;
  text3?: p.Flex<"div">;
  text22?: p.Flex<"div">;
  copyright?: p.Flex<"div">;
  privacyPolicy?: p.Flex<"a"> & Partial<LinkProps>;
};

export interface DefaultHomepageProps {}

export const defaultHomepage__Args: Partial<PlasmicHomepage__ArgsType> = {};

function PlasmicHomepage__RenderFunc(props: {
  variants: PlasmicHomepage__VariantsArgs;
  args: PlasmicHomepage__ArgsType;
  overrides: PlasmicHomepage__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultHomepage__Args, props.args);
  const $props = args;

  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsszbTUtTUfDw81Pi(),
  });

  return (
    <React.Fragment>
      {}

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_shared_css.plasmic_tokens,
            sty.root
          )}
        >
          <div className={classNames(projectcss.all, sty.freeBox__blJrU)}>
            <div
              data-plasmic-name={"row"}
              data-plasmic-override={overrides.row}
              className={classNames(projectcss.all, sty.row)}
            >
              <div
                className={classNames(
                  projectcss.all,
                  sty.freeBox___4TeC2,
                  "header" as const
                )}
              >
                <Logosvg2Icon
                  data-plasmic-name={"svg"}
                  data-plasmic-override={overrides.svg}
                  className={classNames(projectcss.all, sty.svg)}
                  role={"img"}
                />
              </div>

              <div
                data-plasmic-name={"container"}
                data-plasmic-override={overrides.container}
                className={classNames(projectcss.all, sty.container)}
              >
                <div
                  data-plasmic-name={"halfBox"}
                  data-plasmic-override={overrides.halfBox}
                  className={classNames(projectcss.all, sty.halfBox)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      sty.freeBox__vcSa,
                      "dotImg" as const
                    )}
                  >
                    <img
                      alt={""}
                      className={classNames(
                        projectcss.all,
                        projectcss.img,
                        sty.img__yiVIp
                      )}
                      src={
                        hasVariant(globalVariants, "screen", "desktopLarge")
                          ? "/plasmic/landing_page_4_0_knowledge_management/images/buttonssvg3.svg"
                          : "/plasmic/landing_page_4_0_knowledge_management/images/buttonssvg3.svg"
                      }
                    />
                  </div>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lFUd4)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___7ZW6G,
                        "Tagline" as const
                      )}
                    >
                      <h1
                        data-plasmic-name={"h1"}
                        data-plasmic-override={overrides.h1}
                        className={classNames(
                          projectcss.all,
                          projectcss.h1,
                          projectcss.__wab_text,
                          sty.h1,
                          "grad-headline" as const
                        )}
                      >
                        {"Magically capture and organize \nyour conversations"}
                      </h1>
                    </div>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__lvnme)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__x6Nxt,
                          "taglineDesc" as const
                        )}
                      >
                        {
                          "Breadcrumb helps you keep track of whatâ€™s most important from every meeting."
                        }
                      </div>

                      <p.Stack
                        as={"div"}
                        hasGap={true}
                        className={classNames(
                          projectcss.all,
                          sty.freeBox__gJjI2,
                          "waitlist" as const
                        )}
                      >
                        <p.Stack
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__eUWo2
                          )}
                        >
                          <InputText
                            data-plasmic-name={"email1"}
                            data-plasmic-override={overrides.email1}
                            className={classNames("__wab_instance", sty.email1)}
                          />

                          <Button
                            data-plasmic-name={"join1"}
                            data-plasmic-override={overrides.join1}
                            buttonFeatures={["nonFullWidth"]}
                            className={classNames("__wab_instance", sty.join1)}
                            count={
                              <div
                                data-plasmic-name={"text4"}
                                data-plasmic-override={overrides.text4}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text4
                                )}
                              >
                                {"1"}
                              </div>
                            }
                            text2={
                              <div
                                data-plasmic-name={"text23"}
                                data-plasmic-override={overrides.text23}
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text23
                                )}
                              >
                                {"Sign Up"}
                              </div>
                            }
                          />
                        </p.Stack>
                      </p.Stack>
                    </p.Stack>
                  </p.Stack>
                </div>

                <div
                  className={classNames(
                    projectcss.all,
                    sty.freeBox__xo99I,
                    hasVariant(globalVariants, "screen", "mobile")
                      ? ("hero-container" as const)
                      : undefined
                  )}
                >
                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__hxmsk,
                      "hero-image" as const
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/heropng.png"
                    }
                  />
                </div>
              </div>
            </div>

            <p.Stack
              as={"div"}
              data-plasmic-name={"rowProcess"}
              data-plasmic-override={overrides.rowProcess}
              hasGap={true}
              className={classNames(
                projectcss.all,
                sty.rowProcess,
                "processImg" as const
              )}
            >
              <div className={classNames(projectcss.all, sty.freeBox__z6UJa)} />

              <h3
                className={classNames(
                  projectcss.all,
                  projectcss.h3,
                  projectcss.__wab_text,
                  sty.h3__pbrrv,
                  "grad-title" as const
                )}
              >
                <React.Fragment>
                  <React.Fragment>{""}</React.Fragment>
                  <span
                    className={"plasmic_default__all plasmic_default__span"}
                    style={{ fontWeight: 700 }}
                  >
                    {"How breadcrumb works"}
                  </span>
                  <React.Fragment>{""}</React.Fragment>
                </React.Fragment>
              </h3>

              <p.Stack
                as={"div"}
                data-plasmic-name={"container3"}
                data-plasmic-override={overrides.container3}
                hasGap={true}
                className={classNames(projectcss.all, sty.container3)}
              >
                <div
                  data-plasmic-name={"halfBox2"}
                  data-plasmic-override={overrides.halfBox2}
                  className={classNames(projectcss.all, sty.halfBox2)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__syvDa
                    )}
                  >
                    {"Capture"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__v8DsN
                    )}
                  >
                    {
                      "Breadcrumb starts by recording your online conversations."
                    }
                  </div>

                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__mm6H8
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/recordsvg.svg"
                    }
                  />

                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__yPlc
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/arrowRightsvg.svg"
                    }
                  />
                </div>

                <div
                  data-plasmic-name={"halfBox13"}
                  data-plasmic-override={overrides.halfBox13}
                  className={classNames(projectcss.all, sty.halfBox13)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fGi2P
                    )}
                  >
                    {"Transform"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o0N6L
                    )}
                  >
                    {
                      "Our AI creates a summary of relevant takeaways for you and your team."
                    }
                  </div>

                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__ts2A6
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/summarizesvg.svg"
                    }
                  />

                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__xqlOf
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/arrowRightsvg.svg"
                    }
                  />
                </div>

                <div
                  data-plasmic-name={"halfBox14"}
                  data-plasmic-override={overrides.halfBox14}
                  className={classNames(projectcss.all, sty.halfBox14)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__kwgKi
                    )}
                  >
                    {"Track"}
                  </div>

                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__sl41U
                    )}
                  >
                    {"View knowledge and action items across conversations."}
                  </div>

                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__h9UeK
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/understandsvg.svg"
                    }
                  />
                </div>
              </p.Stack>
            </p.Stack>

            {(hasVariant(globalVariants, "screen", "laptop") ? true : true) ? (
              <div
                data-plasmic-name={"row3"}
                data-plasmic-override={overrides.row3}
                className={classNames(projectcss.all, sty.row3)}
              >
                <div
                  data-plasmic-name={"container4"}
                  data-plasmic-override={overrides.container4}
                  className={classNames(projectcss.all, sty.container4)}
                >
                  <div
                    data-plasmic-name={"halfBox4"}
                    data-plasmic-override={overrides.halfBox4}
                    className={classNames(projectcss.all, sty.halfBox4)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__heoMa)}
                    />

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__gf9BF)}
                    >
                      <h3
                        className={classNames(
                          projectcss.all,
                          projectcss.h3,
                          projectcss.__wab_text,
                          sty.h3___6QgWz,
                          "grad-title" as const
                        )}
                      >
                        <React.Fragment>
                          <React.Fragment>
                            {"Give yourself and your team organizing "}
                          </React.Fragment>
                          <span
                            className={
                              "plasmic_default__all plasmic_default__span"
                            }
                            style={{ fontWeight: 700 }}
                          >
                            {"superpowers"}
                          </span>
                          <React.Fragment>{""}</React.Fragment>
                        </React.Fragment>
                      </h3>
                    </p.Stack>
                  </div>
                </div>
              </div>
            ) : null}

            <div
              data-plasmic-name={"row6"}
              data-plasmic-override={overrides.row6}
              className={classNames(projectcss.all, sty.row6)}
            >
              <div
                data-plasmic-name={"container7"}
                data-plasmic-override={overrides.container7}
                className={classNames(projectcss.all, sty.container7)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__u6LE)}>
                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__bhnd6
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/transcriptionpng.png"
                    }
                  />
                </div>

                <div
                  data-plasmic-name={"halfBox7"}
                  data-plasmic-override={overrides.halfBox7}
                  className={classNames(projectcss.all, sty.halfBox7)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__eo5Eg)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__aqeq1
                      )}
                    >
                      {"Save Time Writing Quality Updates"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vWpaC
                      )}
                    >
                      {
                        "Spend seconds instead of minutes or hours organizing meeting notes. Breadcrumb uses AI to instantly convert meetings into browsable summaries."
                      }
                    </div>
                  </p.Stack>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"row5"}
              data-plasmic-override={overrides.row5}
              className={classNames(projectcss.all, sty.row5)}
            >
              <div
                data-plasmic-name={"container6"}
                data-plasmic-override={overrides.container6}
                className={classNames(projectcss.all, sty.container6)}
              >
                <div
                  data-plasmic-name={"halfBox6"}
                  data-plasmic-override={overrides.halfBox6}
                  className={classNames(projectcss.all, sty.halfBox6)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__l3LQ3)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__vZ0Vk
                      )}
                    >
                      {"See the big picture"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__dlS6Z
                      )}
                    >
                      {
                        "Spend less time putting the pieces together. View your past meetings in a single view thatâ€™s relevant to you and your team."
                      }
                    </div>
                  </p.Stack>
                </div>

                <div className={classNames(projectcss.all, sty.freeBox__ziy7C)}>
                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__kMagx
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/bigPicturesvg.svg"
                    }
                  />
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"row11"}
              data-plasmic-override={overrides.row11}
              className={classNames(projectcss.all, sty.row11)}
            >
              <div
                data-plasmic-name={"container12"}
                data-plasmic-override={overrides.container12}
                className={classNames(projectcss.all, sty.container12)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___8M5Gw)}
                >
                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__p4Tlv
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/preparedMettingpng2.png"
                    }
                  />
                </div>

                <div
                  data-plasmic-name={"halfBox15"}
                  data-plasmic-override={overrides.halfBox15}
                  className={classNames(projectcss.all, sty.halfBox15)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__euI8F)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__vXzVq
                      )}
                    >
                      {"Be prepared, always"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___9BtEw
                      )}
                    >
                      {
                        "Be the smartest person in the room. View related notes by person and topic to understand context from all sides."
                      }
                    </div>
                  </p.Stack>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"row7"}
              data-plasmic-override={overrides.row7}
              className={classNames(projectcss.all, sty.row7)}
            >
              <div
                data-plasmic-name={"container8"}
                data-plasmic-override={overrides.container8}
                className={classNames(projectcss.all, sty.container8)}
              >
                <div
                  data-plasmic-name={"halfBox8"}
                  data-plasmic-override={overrides.halfBox8}
                  className={classNames(projectcss.all, sty.halfBox8)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hgiZ)}
                  >
                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2__etktT
                      )}
                    >
                      {"Access team knowledge"}
                    </h2>

                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xu8Wv
                      )}
                    >
                      {
                        "Remove knowledge silos. Breadcrumb combines and organizes takeaways across meetings. Unlock what others know that helps you make progress."
                      }
                    </div>
                  </p.Stack>
                </div>

                <div
                  data-plasmic-name={"halfBox9"}
                  data-plasmic-override={overrides.halfBox9}
                  className={classNames(projectcss.all, sty.halfBox9)}
                >
                  <img
                    alt={""}
                    className={classNames(
                      projectcss.all,
                      projectcss.img,
                      sty.img__a4UI
                    )}
                    src={
                      "/plasmic/landing_page_4_0_knowledge_management/images/knowledgeSilossvg.svg"
                    }
                  />
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"row4"}
              data-plasmic-override={overrides.row4}
              className={classNames(projectcss.all, sty.row4)}
            >
              <div
                data-plasmic-name={"container5"}
                data-plasmic-override={overrides.container5}
                className={classNames(projectcss.all, sty.container5)}
              >
                <div
                  data-plasmic-name={"halfBox5"}
                  data-plasmic-override={overrides.halfBox5}
                  className={classNames(projectcss.all, sty.halfBox5)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__oVsKv)}
                  />

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___3H8X)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3___8Uu44,
                        "grad-title" as const
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"Breadcrumb makes your "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"workflow"}
                        </span>
                        <React.Fragment>
                          {" easier, faster, better"}
                        </React.Fragment>
                      </React.Fragment>
                    </h3>
                  </p.Stack>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"row10"}
              data-plasmic-override={overrides.row10}
              className={classNames(projectcss.all, sty.row10)}
            >
              <div
                data-plasmic-name={"container11"}
                data-plasmic-override={overrides.container11}
                className={classNames(projectcss.all, sty.container11)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"columns"}
                  data-plasmic-override={overrides.columns}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.columns)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column___3PXvh)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yHxDf)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8N8Vf
                        )}
                      >
                        {"Action Plans"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__tX9Nd
                        )}
                      >
                        {
                          "Reduce time following up on action items. Breadcrumbâ€™s workflows give you best practices you can use out of the box to save time converting conversations into progress."
                        }
                      </div>

                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img__ns3Xd
                        )}
                        loading={"lazy" as const}
                        src={
                          "/plasmic/landing_page_4_0_knowledge_management/images/autoOrganizedsvg.svg"
                        }
                      />
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__mZldM)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__cdIy
                        )}
                      >
                        {"Team Collaboration"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ltVlK
                        )}
                      >
                        {
                          "Reduce time communicating. Summarize customer requirements, share knowledge, and simplify group discussions."
                        }
                      </div>

                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img__sztBp
                        )}
                        loading={"lazy" as const}
                        src={
                          "/plasmic/landing_page_4_0_knowledge_management/images/teamReadypng.png"
                        }
                      />
                    </p.Stack>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.column__fLWpU)}
                  >
                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__nKwYw)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hxGwR
                        )}
                      >
                        {"Birdâ€™s eye view"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__xiIah
                        )}
                      >
                        {
                          "See how relationships, knowledge, and progress evolve through each meeting. Informative timelines reveal decision flow."
                        }
                      </div>

                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img__vMYhT
                        )}
                        loading={"lazy" as const}
                        src={
                          "/plasmic/landing_page_4_0_knowledge_management/images/visualizesvg2.svg"
                        }
                      />
                    </p.Stack>

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3R7Wm
                      )}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__gix6G
                        )}
                      >
                        {"Seamless integration"}
                      </div>

                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vlGhX
                        )}
                      >
                        {
                          "Get started in as little as 2 minutes. Connect your calendars and online meeting tools to sync Breadcrumb into your existing workflow."
                        }
                      </div>

                      <img
                        alt={""}
                        className={classNames(
                          projectcss.all,
                          projectcss.img,
                          sty.img__aXsza
                        )}
                        loading={"lazy" as const}
                        src={
                          "/plasmic/landing_page_4_0_knowledge_management/images/integrationsvg.svg"
                        }
                      />
                    </p.Stack>
                  </p.Stack>
                </p.Stack>
              </div>
            </div>

            <div
              data-plasmic-name={"row2"}
              data-plasmic-override={overrides.row2}
              className={classNames(projectcss.all, sty.row2)}
            >
              <div
                data-plasmic-name={"container2"}
                data-plasmic-override={overrides.container2}
                className={classNames(projectcss.all, sty.container2)}
              >
                <div
                  data-plasmic-name={"halfBox3"}
                  data-plasmic-override={overrides.halfBox3}
                  className={classNames(projectcss.all, sty.halfBox3)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__ruEzt)}
                  >
                    <div
                      className={classNames(projectcss.all, sty.freeBox__c49VN)}
                    />

                    <h2
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2___233Xn,
                        "grad-title" as const
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {
                            "Miscommunication costs companies with 100 employees an average of "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"$420,000 "}
                        </span>
                        <React.Fragment>{"per year."}</React.Fragment>
                      </React.Fragment>
                    </h2>
                  </p.Stack>
                </div>
              </div>
            </div>

            <div
              data-plasmic-name={"row8"}
              data-plasmic-override={overrides.row8}
              className={classNames(projectcss.all, sty.row8)}
            >
              <div
                data-plasmic-name={"container9"}
                data-plasmic-override={overrides.container9}
                className={classNames(projectcss.all, sty.container9)}
              >
                <p.Stack
                  as={"div"}
                  data-plasmic-name={"halfBox10"}
                  data-plasmic-override={overrides.halfBox10}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.halfBox10)}
                >
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__lPIs7)}
                  >
                    <h3
                      className={classNames(
                        projectcss.all,
                        projectcss.h3,
                        projectcss.__wab_text,
                        sty.h3__ubElg
                      )}
                    >
                      {"Start placing breadcrumbs today"}
                    </h3>

                    <h4
                      data-plasmic-name={"h4"}
                      data-plasmic-override={overrides.h4}
                      className={classNames(
                        projectcss.all,
                        projectcss.h4,
                        projectcss.__wab_text,
                        sty.h4
                      )}
                    >
                      {"Sign up for early access"}
                    </h4>
                  </p.Stack>

                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__wnt82)}
                  >
                    <InputText
                      data-plasmic-name={"email2"}
                      data-plasmic-override={overrides.email2}
                      className={classNames("__wab_instance", sty.email2)}
                    />

                    <Button
                      data-plasmic-name={"join2"}
                      data-plasmic-override={overrides.join2}
                      buttonFeatures={["nonFullWidth"]}
                      className={classNames("__wab_instance", sty.join2)}
                      count={
                        <div
                          data-plasmic-name={"text3"}
                          data-plasmic-override={overrides.text3}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text3
                          )}
                        >
                          {"1"}
                        </div>
                      }
                      text2={
                        <div
                          data-plasmic-name={"text22"}
                          data-plasmic-override={overrides.text22}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text22
                          )}
                        >
                          {"Sign up"}
                        </div>
                      }
                    />
                  </p.Stack>

                  {(
                    hasVariant(globalVariants, "screen", "mobile")
                      ? true
                      : hasVariant(globalVariants, "screen", "tablet")
                      ? true
                      : hasVariant(globalVariants, "screen", "laptop")
                      ? true
                      : hasVariant(globalVariants, "screen", "desktopLarge")
                      ? true
                      : false
                  ) ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox__xeqTv)}
                    >
                      {true ? (
                        <div
                          data-plasmic-name={"copyright"}
                          data-plasmic-override={overrides.copyright}
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.copyright
                          )}
                        >
                          {"Â© Breadcrumb 2022  |  "}
                        </div>
                      ) : null}
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : hasVariant(globalVariants, "screen", "tablet")
                          ? true
                          : hasVariant(globalVariants, "screen", "laptop")
                          ? true
                          : hasVariant(globalVariants, "screen", "desktopLarge")
                          ? true
                          : false
                      ) ? (
                        <p.PlasmicLink
                          data-plasmic-name={"privacyPolicy"}
                          data-plasmic-override={overrides.privacyPolicy}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            projectcss.__wab_text,
                            sty.privacyPolicy
                          )}
                          component={Link}
                          href={"https://breadcrumb.so/privacy" as const}
                          platform={"nextjs"}
                        >
                          {"Privacy Policy"}
                        </p.PlasmicLink>
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "row",
    "svg",
    "container",
    "halfBox",
    "h1",
    "email1",
    "join1",
    "text4",
    "text23",
    "rowProcess",
    "container3",
    "halfBox2",
    "halfBox13",
    "halfBox14",
    "row3",
    "container4",
    "halfBox4",
    "row6",
    "container7",
    "halfBox7",
    "row5",
    "container6",
    "halfBox6",
    "row11",
    "container12",
    "halfBox15",
    "row7",
    "container8",
    "halfBox8",
    "halfBox9",
    "row4",
    "container5",
    "halfBox5",
    "row10",
    "container11",
    "columns",
    "row2",
    "container2",
    "halfBox3",
    "row8",
    "container9",
    "halfBox10",
    "h4",
    "email2",
    "join2",
    "text3",
    "text22",
    "copyright",
    "privacyPolicy",
  ],
  row: [
    "row",
    "svg",
    "container",
    "halfBox",
    "h1",
    "email1",
    "join1",
    "text4",
    "text23",
  ],
  svg: ["svg"],
  container: [
    "container",
    "halfBox",
    "h1",
    "email1",
    "join1",
    "text4",
    "text23",
  ],
  halfBox: ["halfBox", "h1", "email1", "join1", "text4", "text23"],
  h1: ["h1"],
  email1: ["email1"],
  join1: ["join1", "text4", "text23"],
  text4: ["text4"],
  text23: ["text23"],
  rowProcess: [
    "rowProcess",
    "container3",
    "halfBox2",
    "halfBox13",
    "halfBox14",
  ],
  container3: ["container3", "halfBox2", "halfBox13", "halfBox14"],
  halfBox2: ["halfBox2"],
  halfBox13: ["halfBox13"],
  halfBox14: ["halfBox14"],
  row3: ["row3", "container4", "halfBox4"],
  container4: ["container4", "halfBox4"],
  halfBox4: ["halfBox4"],
  row6: ["row6", "container7", "halfBox7"],
  container7: ["container7", "halfBox7"],
  halfBox7: ["halfBox7"],
  row5: ["row5", "container6", "halfBox6"],
  container6: ["container6", "halfBox6"],
  halfBox6: ["halfBox6"],
  row11: ["row11", "container12", "halfBox15"],
  container12: ["container12", "halfBox15"],
  halfBox15: ["halfBox15"],
  row7: ["row7", "container8", "halfBox8", "halfBox9"],
  container8: ["container8", "halfBox8", "halfBox9"],
  halfBox8: ["halfBox8"],
  halfBox9: ["halfBox9"],
  row4: ["row4", "container5", "halfBox5"],
  container5: ["container5", "halfBox5"],
  halfBox5: ["halfBox5"],
  row10: ["row10", "container11", "columns"],
  container11: ["container11", "columns"],
  columns: ["columns"],
  row2: ["row2", "container2", "halfBox3"],
  container2: ["container2", "halfBox3"],
  halfBox3: ["halfBox3"],
  row8: [
    "row8",
    "container9",
    "halfBox10",
    "h4",
    "email2",
    "join2",
    "text3",
    "text22",
    "copyright",
    "privacyPolicy",
  ],
  container9: [
    "container9",
    "halfBox10",
    "h4",
    "email2",
    "join2",
    "text3",
    "text22",
    "copyright",
    "privacyPolicy",
  ],
  halfBox10: [
    "halfBox10",
    "h4",
    "email2",
    "join2",
    "text3",
    "text22",
    "copyright",
    "privacyPolicy",
  ],
  h4: ["h4"],
  email2: ["email2"],
  join2: ["join2", "text3", "text22"],
  text3: ["text3"],
  text22: ["text22"],
  copyright: ["copyright"],
  privacyPolicy: ["privacyPolicy"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  row: "div";
  svg: "svg";
  container: "div";
  halfBox: "div";
  h1: "h1";
  email1: typeof InputText;
  join1: typeof Button;
  text4: "div";
  text23: "div";
  rowProcess: "div";
  container3: "div";
  halfBox2: "div";
  halfBox13: "div";
  halfBox14: "div";
  row3: "div";
  container4: "div";
  halfBox4: "div";
  row6: "div";
  container7: "div";
  halfBox7: "div";
  row5: "div";
  container6: "div";
  halfBox6: "div";
  row11: "div";
  container12: "div";
  halfBox15: "div";
  row7: "div";
  container8: "div";
  halfBox8: "div";
  halfBox9: "div";
  row4: "div";
  container5: "div";
  halfBox5: "div";
  row10: "div";
  container11: "div";
  columns: "div";
  row2: "div";
  container2: "div";
  halfBox3: "div";
  row8: "div";
  container9: "div";
  halfBox10: "div";
  h4: "h4";
  email2: typeof InputText;
  join2: typeof Button;
  text3: "div";
  text22: "div";
  copyright: "div";
  privacyPolicy: "a";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHomepage__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHomepage__VariantsArgs;
    args?: PlasmicHomepage__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHomepage__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHomepage__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicHomepage__ArgProps,
      internalVariantPropNames: PlasmicHomepage__VariantProps,
    });

    return PlasmicHomepage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHomepage";
  } else {
    func.displayName = `PlasmicHomepage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomepage = Object.assign(
  // Top-level PlasmicHomepage renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    row: makeNodeComponent("row"),
    svg: makeNodeComponent("svg"),
    container: makeNodeComponent("container"),
    halfBox: makeNodeComponent("halfBox"),
    h1: makeNodeComponent("h1"),
    email1: makeNodeComponent("email1"),
    join1: makeNodeComponent("join1"),
    text4: makeNodeComponent("text4"),
    text23: makeNodeComponent("text23"),
    rowProcess: makeNodeComponent("rowProcess"),
    container3: makeNodeComponent("container3"),
    halfBox2: makeNodeComponent("halfBox2"),
    halfBox13: makeNodeComponent("halfBox13"),
    halfBox14: makeNodeComponent("halfBox14"),
    row3: makeNodeComponent("row3"),
    container4: makeNodeComponent("container4"),
    halfBox4: makeNodeComponent("halfBox4"),
    row6: makeNodeComponent("row6"),
    container7: makeNodeComponent("container7"),
    halfBox7: makeNodeComponent("halfBox7"),
    row5: makeNodeComponent("row5"),
    container6: makeNodeComponent("container6"),
    halfBox6: makeNodeComponent("halfBox6"),
    row11: makeNodeComponent("row11"),
    container12: makeNodeComponent("container12"),
    halfBox15: makeNodeComponent("halfBox15"),
    row7: makeNodeComponent("row7"),
    container8: makeNodeComponent("container8"),
    halfBox8: makeNodeComponent("halfBox8"),
    halfBox9: makeNodeComponent("halfBox9"),
    row4: makeNodeComponent("row4"),
    container5: makeNodeComponent("container5"),
    halfBox5: makeNodeComponent("halfBox5"),
    row10: makeNodeComponent("row10"),
    container11: makeNodeComponent("container11"),
    columns: makeNodeComponent("columns"),
    row2: makeNodeComponent("row2"),
    container2: makeNodeComponent("container2"),
    halfBox3: makeNodeComponent("halfBox3"),
    row8: makeNodeComponent("row8"),
    container9: makeNodeComponent("container9"),
    halfBox10: makeNodeComponent("halfBox10"),
    h4: makeNodeComponent("h4"),
    email2: makeNodeComponent("email2"),
    join2: makeNodeComponent("join2"),
    text3: makeNodeComponent("text3"),
    text22: makeNodeComponent("text22"),
    copyright: makeNodeComponent("copyright"),
    privacyPolicy: makeNodeComponent("privacyPolicy"),

    // Metadata about props expected for PlasmicHomepage
    internalVariantProps: PlasmicHomepage__VariantProps,
    internalArgProps: PlasmicHomepage__ArgProps,
  }
);

export default PlasmicHomepage;
/* prettier-ignore-end */
