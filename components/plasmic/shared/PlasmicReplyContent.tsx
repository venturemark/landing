// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mTVXT6w3HHjZ4d74q3gB76
// Component: q3VnCwfx25w
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import PhotoAvatar from "../../PhotoAvatar"; // plasmic-import: uaoIqTcPRC-/component
import Dropdown from "../../Dropdown"; // plasmic-import: Umq3CDOCIR/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_shared.module.css"; // plasmic-import: mTVXT6w3HHjZ4d74q3gB76/projectcss
import sty from "./PlasmicReplyContent.module.css"; // plasmic-import: q3VnCwfx25w/css

import IconDotMenuIcon from "./icons/PlasmicIcon__IconDotMenu"; // plasmic-import: Dz069s-rE/icon

export type PlasmicReplyContent__VariantMembers = {
  state: "isUser";
  isUserOnClick: "isUserOnClick";
};

export type PlasmicReplyContent__VariantsArgs = {
  state?: SingleChoiceArg<"isUser">;
  isUserOnClick?: SingleBooleanChoiceArg<"isUserOnClick">;
};

type VariantPropType = keyof PlasmicReplyContent__VariantsArgs;
export const PlasmicReplyContent__VariantProps = new Array<VariantPropType>(
  "state",
  "isUserOnClick"
);

export type PlasmicReplyContent__ArgsType = {
  userName?: React.ReactNode;
  text?: React.ReactNode;
  date?: React.ReactNode;
};

type ArgPropType = keyof PlasmicReplyContent__ArgsType;
export const PlasmicReplyContent__ArgProps = new Array<ArgPropType>(
  "userName",
  "text",
  "date"
);

export type PlasmicReplyContent__OverridesType = {
  root?: p.Flex<"div">;
  editorContainer?: p.Flex<"div">;
  photoAvatar?: p.Flex<typeof PhotoAvatar>;
  span?: p.Flex<"span">;
  iconMenu?: p.Flex<"button">;
  svg?: p.Flex<"svg">;
  dropdown?: p.Flex<typeof Dropdown>;
  deleteOption?: p.Flex<"div">;
};

export interface DefaultReplyContentProps {
  userName?: React.ReactNode;
  text?: React.ReactNode;
  date?: React.ReactNode;
  state?: SingleChoiceArg<"isUser">;
  isUserOnClick?: SingleBooleanChoiceArg<"isUserOnClick">;
  className?: string;
}

export const defaultReplyContent__Args: Partial<PlasmicReplyContent__ArgsType> =
  {};

function PlasmicReplyContent__RenderFunc(props: {
  variants: PlasmicReplyContent__VariantsArgs;
  args: PlasmicReplyContent__ArgsType;
  overrides: PlasmicReplyContent__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;
  const args = Object.assign({}, defaultReplyContent__Args, props.args);
  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"editorContainer"}
        data-plasmic-override={overrides.editorContainer}
        className={classNames(projectcss.all, sty.editorContainer, {
          [sty.editorContainerisUserOnClick]: hasVariant(
            variants,
            "isUserOnClick",
            "isUserOnClick"
          ),
          [sty.editorContainerstate_isUser]: hasVariant(
            variants,
            "state",
            "isUser"
          ),
          [sty.editorContainerstate_isUser_isUserOnClick]:
            hasVariant(variants, "isUserOnClick", "isUserOnClick") &&
            hasVariant(variants, "state", "isUser"),
        })}
      >
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__cyQ9E)}
        >
          <PhotoAvatar
            data-plasmic-name={"photoAvatar"}
            data-plasmic-override={overrides.photoAvatar}
            className={classNames("__wab_instance", sty.photoAvatar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox___0YC8Z)}>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__rqpD, {
                [sty.freeBoxstate_isUser__rqpDFEdPi]: hasVariant(
                  variants,
                  "state",
                  "isUser"
                ),
              })}
            >
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__iU0A, {
                  [sty.freeBoxstate_isUser__iU0AfEdPi]: hasVariant(
                    variants,
                    "state",
                    "isUser"
                  ),
                })}
              >
                <div className={classNames(projectcss.all, sty.freeBox__cAoxI)}>
                  <p.Stack
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__oKSfs)}
                  >
                    {p.renderPlasmicSlot({
                      defaultContents: (
                        <span
                          className={classNames(
                            projectcss.all,
                            projectcss.span,
                            projectcss.__wab_text,
                            sty.span__l1Yn1
                          )}
                        >
                          <React.Fragment>
                            <React.Fragment>{""}</React.Fragment>
                            <span
                              className={
                                "plasmic_default__all plasmic_default__span"
                              }
                              style={{ fontWeight: 700 }}
                            >
                              {"asdasdasdasd "}
                            </span>
                            <React.Fragment>{""}</React.Fragment>
                          </React.Fragment>
                        </span>
                      ),

                      value: args.userName,
                      className: classNames(sty.slotTargetUserName),
                    })}

                    <p.Stack
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__wfm2A)}
                    >
                      <span
                        data-plasmic-name={"span"}
                        data-plasmic-override={overrides.span}
                        className={classNames(
                          projectcss.all,
                          projectcss.span,
                          projectcss.__wab_text,
                          sty.span,
                          {
                            [sty.spanstate_isUser_isUserOnClick]:
                              hasVariant(variants, "state", "isUser") &&
                              hasVariant(
                                variants,
                                "isUserOnClick",
                                "isUserOnClick"
                              ),
                          }
                        )}
                      >
                        {"â€¢"}
                      </span>

                      {p.renderPlasmicSlot({
                        defaultContents: (
                          <span
                            className={classNames(
                              projectcss.all,
                              projectcss.span,
                              projectcss.__wab_text,
                              sty.span___4NLge
                            )}
                          >
                            {"3 hours ago"}
                          </span>
                        ),

                        value: args.date,
                        className: classNames(sty.slotTargetDate),
                      })}
                    </p.Stack>
                  </p.Stack>
                </div>

                {(hasVariant(variants, "state", "isUser") ? true : false) ? (
                  <div
                    className={classNames(projectcss.all, sty.freeBox___2Fduc, {
                      [sty.freeBoxstate_isUser___2FducFEdPi]: hasVariant(
                        variants,
                        "state",
                        "isUser"
                      ),
                    })}
                  >
                    <button
                      data-plasmic-name={"iconMenu"}
                      data-plasmic-override={overrides.iconMenu}
                      className={classNames(
                        projectcss.all,
                        projectcss.button,
                        sty.iconMenu
                      )}
                    >
                      <IconDotMenuIcon
                        data-plasmic-name={"svg"}
                        data-plasmic-override={overrides.svg}
                        className={classNames(projectcss.all, sty.svg, {
                          [sty.svgisUserOnClick]: hasVariant(
                            variants,
                            "isUserOnClick",
                            "isUserOnClick"
                          ),
                          [sty.svgstate_isUser]: hasVariant(
                            variants,
                            "state",
                            "isUser"
                          ),
                          [sty.svgstate_isUser_isUserOnClick]:
                            hasVariant(
                              variants,
                              "isUserOnClick",
                              "isUserOnClick"
                            ) && hasVariant(variants, "state", "isUser"),
                        })}
                        role={"img"}
                      />

                      {(
                        hasVariant(
                          variants,
                          "isUserOnClick",
                          "isUserOnClick"
                        ) && hasVariant(variants, "state", "isUser")
                          ? true
                          : false
                      ) ? (
                        <Dropdown
                          data-plasmic-name={"dropdown"}
                          data-plasmic-override={overrides.dropdown}
                          className={classNames(
                            "__wab_instance",
                            sty.dropdown,
                            {
                              [sty.dropdownisUserOnClick]: hasVariant(
                                variants,
                                "isUserOnClick",
                                "isUserOnClick"
                              ),
                              [sty.dropdownstate_isUser]: hasVariant(
                                variants,
                                "state",
                                "isUser"
                              ),
                              [sty.dropdownstate_isUser_isUserOnClick]:
                                hasVariant(
                                  variants,
                                  "isUserOnClick",
                                  "isUserOnClick"
                                ) && hasVariant(variants, "state", "isUser"),
                            }
                          )}
                          rename2={
                            <div
                              data-plasmic-name={"deleteOption"}
                              data-plasmic-override={overrides.deleteOption}
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.deleteOption,
                                {
                                  [sty.deleteOptionstate_isUser]: hasVariant(
                                    variants,
                                    "state",
                                    "isUser"
                                  ),
                                  [sty.deleteOptionstate_isUser_isUserOnClick]:
                                    hasVariant(
                                      variants,
                                      "isUserOnClick",
                                      "isUserOnClick"
                                    ) &&
                                    hasVariant(variants, "state", "isUser"),
                                }
                              )}
                            >
                              {hasVariant(
                                variants,
                                "isUserOnClick",
                                "isUserOnClick"
                              ) && hasVariant(variants, "state", "isUser")
                                ? "Delete"
                                : "Remove"}
                            </div>
                          }
                        />
                      ) : null}
                    </button>
                  </div>
                ) : null}
              </p.Stack>

              <div className={classNames(projectcss.all, sty.freeBox__wE4D)}>
                <div className={classNames(projectcss.all, sty.freeBox__ly8Vh)}>
                  {p.renderPlasmicSlot({
                    defaultContents: (
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__mkcoe
                        )}
                      >
                        {""}
                      </div>
                    ),

                    value: args.text,
                    className: classNames(sty.slotTargetText),
                  })}
                </div>
              </div>
            </p.Stack>
          </div>
        </p.Stack>
      </div>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "editorContainer",
    "photoAvatar",
    "span",
    "iconMenu",
    "svg",
    "dropdown",
    "deleteOption",
  ],
  editorContainer: [
    "editorContainer",
    "photoAvatar",
    "span",
    "iconMenu",
    "svg",
    "dropdown",
    "deleteOption",
  ],
  photoAvatar: ["photoAvatar"],
  span: ["span"],
  iconMenu: ["iconMenu", "svg", "dropdown", "deleteOption"],
  svg: ["svg"],
  dropdown: ["dropdown", "deleteOption"],
  deleteOption: ["deleteOption"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  editorContainer: "div";
  photoAvatar: typeof PhotoAvatar;
  span: "span";
  iconMenu: "button";
  svg: "svg";
  dropdown: typeof Dropdown;
  deleteOption: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicReplyContent__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicReplyContent__VariantsArgs;
    args?: PlasmicReplyContent__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicReplyContent__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicReplyContent__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicReplyContent__ArgProps,
      internalVariantPropNames: PlasmicReplyContent__VariantProps,
    });

    return PlasmicReplyContent__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicReplyContent";
  } else {
    func.displayName = `PlasmicReplyContent.${nodeName}`;
  }
  return func;
}

export const PlasmicReplyContent = Object.assign(
  // Top-level PlasmicReplyContent renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    editorContainer: makeNodeComponent("editorContainer"),
    photoAvatar: makeNodeComponent("photoAvatar"),
    span: makeNodeComponent("span"),
    iconMenu: makeNodeComponent("iconMenu"),
    svg: makeNodeComponent("svg"),
    dropdown: makeNodeComponent("dropdown"),
    deleteOption: makeNodeComponent("deleteOption"),

    // Metadata about props expected for PlasmicReplyContent
    internalVariantProps: PlasmicReplyContent__VariantProps,
    internalArgProps: PlasmicReplyContent__ArgProps,
  }
);

export default PlasmicReplyContent;
/* prettier-ignore-end */
