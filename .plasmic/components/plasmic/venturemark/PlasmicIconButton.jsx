// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: 4ntWB_3tm2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  useTrigger,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicIconButton.module.css"; // plasmic-import: 4ntWB_3tm2/css
import IconAudienceIcon from "./icons/PlasmicIcon__IconAudience"; // plasmic-import: zICM6YbRr4/icon

export const PlasmicIconButton__VariantProps = new Array(
  "isDisabled",
  "showContent",
  "withIcons"
);

export const PlasmicIconButton__ArgProps = new Array(
  "content",
  "startIcon",
  "endIcon"
);

function PlasmicIconButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps,
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: false,
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root____focusVisibleWithin]: triggers.focusVisibleWithin_root,
        [sty.root__isDisabled]: hasVariant(
          variants,
          "isDisabled",
          "isDisabled"
        ),

        [sty.root__showContent]: hasVariant(
          variants,
          "showContent",
          "showContent"
        ),

        [sty.root__withIcons_end]: hasVariant(variants, "withIcons", "end"),
        [sty.root__withIcons_start]: hasVariant(variants, "withIcons", "start"),
      })}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      {(hasVariant(variants, "withIcons", "start") ? true : false) ? (
        <p.PlasmicSlot
          defaultContents={
            <IconAudienceIcon
              data-plasmic-name={"startIcon"}
              data-plasmic-override={overrides.startIcon}
              className={classNames(defaultcss.all, sty.startIcon)}
              role={"img"}
            />
          }
          value={args.startIcon}
        />
      ) : null}
      {(hasVariant(variants, "showContent", "showContent") ? true : false) ? (
        <div
          data-plasmic-name={"box"}
          data-plasmic-override={overrides.box}
          className={classNames(defaultcss.all, sty.box, {
            [sty.box__isDisabled]: hasVariant(
              variants,
              "isDisabled",
              "isDisabled"
            ),

            [sty.box__showContent]: hasVariant(
              variants,
              "showContent",
              "showContent"
            ),
          })}
        >
          <p.PlasmicSlot
            defaultContents={""}
            value={args.content}
            className={classNames(sty.slotContent, {
              [sty.slotContent__isDisabled]: hasVariant(
                variants,
                "isDisabled",
                "isDisabled"
              ),
            })}
          />
        </div>
      ) : null}
      {(hasVariant(variants, "withIcons", "end") ? true : false) ? (
        <p.PlasmicSlot
          defaultContents={
            <IconAudienceIcon
              data-plasmic-name={"endIcon"}
              data-plasmic-override={overrides.endIcon}
              className={classNames(defaultcss.all, sty.endIcon)}
              role={"img"}
            />
          }
          value={args.endIcon}
        />
      ) : null}
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "startIcon", "box", "endIcon"],
  startIcon: ["startIcon"],
  box: ["box"],
  endIcon: ["endIcon"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicIconButton__ArgProps,
      internalVariantPropNames: PlasmicIconButton__VariantProps,
    });

    return PlasmicIconButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicIconButton";
  } else {
    func.displayName = `PlasmicIconButton.${nodeName}`;
  }
  return func;
}

export const PlasmicIconButton = Object.assign(
  // Top-level PlasmicIconButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIcon: makeNodeComponent("startIcon"),
    box: makeNodeComponent("box"),
    endIcon: makeNodeComponent("endIcon"),
    // Metadata about props expected for PlasmicIconButton
    internalVariantProps: PlasmicIconButton__VariantProps,
    internalArgProps: PlasmicIconButton__ArgProps,
  }
);

export default PlasmicIconButton;
/* prettier-ignore-end */
