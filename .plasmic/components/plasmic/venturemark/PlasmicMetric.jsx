// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: yAnxCRnRr7
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicMetric.module.css"; // plasmic-import: yAnxCRnRr7/css

export const PlasmicMetric__VariantProps = new Array();

export const PlasmicMetric__ArgProps = new Array("name");

function PlasmicMetric__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"metricItem"}
      data-plasmic-override={overrides.metricItem}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.metricItem
      )}
    >
      <div className={classNames(defaultcss.all, sty.box__pHtDa)}>
        <p.PlasmicSlot
          defaultContents={"Updates"}
          value={args.name}
          className={classNames(sty.slotName)}
        />
      </div>

      <div className={classNames(defaultcss.all, sty.box__eSmQi)}>
        <img
          data-plasmic-name={"graphContainer"}
          data-plasmic-override={overrides.graphContainer}
          alt={""}
          className={classNames(defaultcss.img, sty.graphContainer)}
          role={"img"}
          src={"/plasmic/venturemark/images/image7.svg"}
        />
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  metricItem: ["metricItem", "graphContainer"],
  graphContainer: ["graphContainer"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMetric__ArgProps,
      internalVariantPropNames: PlasmicMetric__VariantProps,
    });

    return PlasmicMetric__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "metricItem") {
    func.displayName = "PlasmicMetric";
  } else {
    func.displayName = `PlasmicMetric.${nodeName}`;
  }
  return func;
}

export const PlasmicMetric = Object.assign(
  // Top-level PlasmicMetric renders the root element
  makeNodeComponent("metricItem"),
  {
    // Helper components rendering sub-elements
    graphContainer: makeNodeComponent("graphContainer"),
    // Metadata about props expected for PlasmicMetric
    internalVariantProps: PlasmicMetric__VariantProps,
    internalArgProps: PlasmicMetric__ArgProps,
  }
);

export default PlasmicMetric;
/* prettier-ignore-end */
