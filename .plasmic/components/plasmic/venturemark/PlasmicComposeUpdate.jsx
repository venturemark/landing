// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: HtYltV_zNv
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 56c3647f-e651-4dbb-a83a-6988a6e19d16/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicComposeUpdate.module.css"; // plasmic-import: HtYltV_zNv/css
import IconMetricIcon from "./icons/PlasmicIcon__IconMetric"; // plasmic-import: -jtIQQh_Az/icon
import IconAttentionIcon from "./icons/PlasmicIcon__IconAttention"; // plasmic-import: JiGnSt4Vsj/icon

export const PlasmicComposeUpdate__VariantProps = new Array("state");

export const PlasmicComposeUpdate__ArgProps = new Array("errorMessage");

function PlasmicComposeUpdate__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <p.Stack
      as={"form"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_ask]: hasVariant(variants, "state", "ask"),
        [sty.root__state_metric]: hasVariant(variants, "state", "metric")
      })}
    >
      {(hasVariant(globalVariants, "screen", "desktop") ? false : true) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__qixRf, {
            [sty.box__state_metric__qixRfG90Xd]: hasVariant(
              variants,
              "state",
              "metric"
            )
          })}
        >
          {(
            hasVariant(variants, "state", "metric") &&
            hasVariant(globalVariants, "screen", "desktop")
              ? false
              : hasVariant(globalVariants, "screen", "desktop")
              ? false
              : true
          ) ? (
            <div
              className={classNames(defaultcss.all, sty.box__dfBy3, {
                [sty.box__state_ask__dfBy3GgCLb]: hasVariant(
                  variants,
                  "state",
                  "ask"
                ),

                [sty.box__state_metric__dfBy3G90Xd]: hasVariant(
                  variants,
                  "state",
                  "metric"
                )
              })}
            >
              <img
                data-plasmic-name={"avatar"}
                data-plasmic-override={overrides.avatar}
                alt={""}
                className={classNames(defaultcss.img, sty.avatar, {
                  [sty.avatar__state_ask]: hasVariant(variants, "state", "ask"),
                  [sty.avatar__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  )
                })}
                role={"img"}
                src={
                  "https://pbs.twimg.com/profile_images/1027401107708858368/FNZP7TEE_400x400.jpg"
                }
              />
            </div>
          ) : null}
          {(hasVariant(variants, "state", "metric") ? true : false) ? (
            <div
              className={classNames(defaultcss.all, sty.box___5NsJ, {
                [sty.box__state_metric___5NsJG90Xd]: hasVariant(
                  variants,
                  "state",
                  "metric"
                )
              })}
            >
              <input
                data-plasmic-name={"valueInput"}
                data-plasmic-override={overrides.valueInput}
                className={classNames(defaultcss.input, sty.valueInput, {
                  [sty.valueInput__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  )
                })}
                placeholder={"Enter Value"}
                size={1}
                type={"text"}
              />
            </div>
          ) : null}
          {(hasVariant(variants, "state", "metric") ? false : false) ? (
            <div
              className={classNames(defaultcss.all, sty.box___8YYkB, {
                [sty.box__state_metric___8YYkBg90Xd]: hasVariant(
                  variants,
                  "state",
                  "metric"
                )
              })}
            >
              <input
                data-plasmic-name={"textbox"}
                data-plasmic-override={overrides.textbox}
                className={classNames(defaultcss.input, sty.textbox, {
                  [sty.textbox__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  )
                })}
                placeholder={"Enter Value"}
                size={1}
                type={"text"}
              />
            </div>
          ) : null}
        </p.Stack>
      ) : null}

      <div
        className={classNames(defaultcss.all, sty.box__nmsGi, {
          [sty.box__state_ask__nmsGiGgCLb]: hasVariant(
            variants,
            "state",
            "ask"
          ),

          [sty.box__state_metric__nmsGig90Xd]: hasVariant(
            variants,
            "state",
            "metric"
          )
        })}
      >
        {(
          hasVariant(variants, "state", "ask")
            ? false
            : hasVariant(variants, "state", "metric")
            ? false
            : false
        ) ? (
          <p.Stack
            as={"div"}
            hasGap={
              hasVariant(variants, "state", "metric") ||
              hasVariant(variants, "state", "ask")
                ? true
                : false
            }
            className={classNames(defaultcss.all, sty.box__afEci, {
              [sty.box__state_ask__afEciGgCLb]: hasVariant(
                variants,
                "state",
                "ask"
              ),

              [sty.box__state_metric__afEcig90Xd]: hasVariant(
                variants,
                "state",
                "metric"
              )
            })}
          >
            {(
              hasVariant(variants, "state", "ask")
                ? false
                : hasVariant(variants, "state", "metric")
                ? false
                : true
            ) ? (
              <p.PlasmicIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                PlasmicIconType={
                  hasVariant(variants, "state", "ask")
                    ? IconAttentionIcon
                    : IconMetricIcon
                }
                className={classNames(defaultcss.all, sty.svg, {
                  [sty.svg__state_ask]: hasVariant(variants, "state", "ask"),
                  [sty.svg__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  )
                })}
                role={"img"}
              />
            ) : null}
            {(
              hasVariant(variants, "state", "ask")
                ? false
                : hasVariant(variants, "state", "metric")
                ? false
                : true
            ) ? (
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__sGa2G,
                  {
                    [sty.box__state_ask__sGa2GGgCLb]: hasVariant(
                      variants,
                      "state",
                      "ask"
                    ),

                    [sty.box__state_metric__sGa2GG90Xd]: hasVariant(
                      variants,
                      "state",
                      "metric"
                    )
                  }
                )}
              >
                {hasVariant(variants, "state", "ask")
                  ? "Intro Request"
                  : "People"}
              </div>
            ) : null}
          </p.Stack>
        ) : null}

        <div
          className={classNames(defaultcss.all, sty.box__svP9E, {
            [sty.box__state_ask__svP9EGgCLb]: hasVariant(
              variants,
              "state",
              "ask"
            ),

            [sty.box__state_metric__svP9Eg90Xd]: hasVariant(
              variants,
              "state",
              "metric"
            )
          })}
        >
          <div
            data-plasmic-name={"slateEditor"}
            data-plasmic-override={overrides.slateEditor}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.slateEditor,
              {
                [sty.slateEditor__state_ask]: hasVariant(
                  variants,
                  "state",
                  "ask"
                ),

                [sty.slateEditor__state_metric]: hasVariant(
                  variants,
                  "state",
                  "metric"
                )
              }
            )}
          >
            {"Why does this matter?"}
          </div>
        </div>
      </div>

      <div
        className={classNames(defaultcss.all, sty.box__nrVWf, {
          [sty.box__state_ask__nrVWfGgCLb]: hasVariant(
            variants,
            "state",
            "ask"
          ),

          [sty.box__state_metric__nrVWfG90Xd]: hasVariant(
            variants,
            "state",
            "metric"
          )
        })}
      >
        <div className={classNames(defaultcss.all, sty.box__cywFr)}>
          <p.PlasmicSlot
            defaultContents={""}
            value={args.errorMessage}
            className={classNames(sty.slotErrorMessage)}
          />
        </div>
      </div>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "avatar", "valueInput", "textbox", "svg", "slateEditor"],
  avatar: ["avatar"],
  valueInput: ["valueInput"],
  textbox: ["textbox"],
  svg: ["svg"],
  slateEditor: ["slateEditor"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicComposeUpdate__ArgProps,
      internalVariantPropNames: PlasmicComposeUpdate__VariantProps
    });

    return PlasmicComposeUpdate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicComposeUpdate";
  } else {
    func.displayName = `PlasmicComposeUpdate.${nodeName}`;
  }
  return func;
}

export const PlasmicComposeUpdate = Object.assign(
  // Top-level PlasmicComposeUpdate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    valueInput: makeNodeComponent("valueInput"),
    textbox: makeNodeComponent("textbox"),
    svg: makeNodeComponent("svg"),
    slateEditor: makeNodeComponent("slateEditor"),
    // Metadata about props expected for PlasmicComposeUpdate
    internalVariantProps: PlasmicComposeUpdate__VariantProps,
    internalArgProps: PlasmicComposeUpdate__ArgProps
  }
);

export default PlasmicComposeUpdate;
/* prettier-ignore-end */
