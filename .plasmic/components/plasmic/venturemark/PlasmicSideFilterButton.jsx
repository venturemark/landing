// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: pT17Dg-GYT
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 56c3647f-e651-4dbb-a83a-6988a6e19d16/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicSideFilterButton.module.css"; // plasmic-import: pT17Dg-GYT/css

export const PlasmicSideFilterButton__VariantProps = new Array();

export const PlasmicSideFilterButton__ArgProps = new Array();

function PlasmicSideFilterButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (hasVariant(globalVariants, "screen", "desktop") ? true : false) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__whtA
        )}
      >
        {"ALL"}
      </div>

      <div
        className={classNames(
          defaultcss.all,
          defaultcss.__wab_text,
          sty.box__bW1GK
        )}
      >
        {"(12)"}
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicSideFilterButton__ArgProps,
      internalVariantPropNames: PlasmicSideFilterButton__VariantProps
    });

    return PlasmicSideFilterButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideFilterButton";
  } else {
    func.displayName = `PlasmicSideFilterButton.${nodeName}`;
  }
  return func;
}

export const PlasmicSideFilterButton = Object.assign(
  // Top-level PlasmicSideFilterButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicSideFilterButton
    internalVariantProps: PlasmicSideFilterButton__VariantProps,
    internalArgProps: PlasmicSideFilterButton__ArgProps
  }
);

export default PlasmicSideFilterButton;
/* prettier-ignore-end */
