// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: xr8buS_I4PE
import * as React from "react";
import Link from "next/link";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 56c3647f-e651-4dbb-a83a-6988a6e19d16/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicAcceptInvite.module.css"; // plasmic-import: xr8buS_I4PE/css

export const PlasmicAcceptInvite__VariantProps = new Array("loading");

export const PlasmicAcceptInvite__ArgProps = new Array(
  "firstName",
  "companyName",
  "companyAvatar",
  "companyName2",
  "companyDescription"
);

function PlasmicAcceptInvite__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants()
  });

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__loading_isLoading]: hasVariant(
          variants,
          "loading",
          "isLoading"
        )
      })}
    >
      <div className={classNames(defaultcss.all, sty.box__x5Kgu)}>
        <div
          className={classNames(defaultcss.all, sty.box___1ZvFa, {
            [sty.box__loading_isLoading___1ZvFa9WKv]: hasVariant(
              variants,
              "loading",
              "isLoading"
            )
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__x13VJ,
              {
                [sty.box__loading_isLoading__x13VJ9WKv]: hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                )
              }
            )}
          >
            {hasVariant(variants, "loading", "isLoading")
              ? "We're Finding Your Invite"
              : hasVariant(globalVariants, "screen", "desktop")
              ? "Congratulations "
              : "Congratulations "}
          </div>

          <p.PlasmicSlot
            defaultContents={""}
            value={args.firstName}
            className={classNames(sty.slotFirstName)}
          />

          {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__l7Zf,
                {
                  [sty.box__loading_isLoading__l7Zf9WKv]: hasVariant(
                    variants,
                    "loading",
                    "isLoading"
                  )
                }
              )}
            >
              {"!"}
            </div>
          ) : null}
        </div>

        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box___2Nr5F, {
            [sty.box__loading_isLoading___2Nr5F9WKv]: hasVariant(
              variants,
              "loading",
              "isLoading"
            )
          })}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__llSMm,
              {
                [sty.box__loading_isLoading__llSMm9WKv]: hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                )
              }
            )}
          >
            {hasVariant(variants, "loading", "isLoading")
              ? "Please be patient. ðŸ™‚ "
              : "You're confirmed to receive updates from "}
          </div>

          {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
            <div
              className={classNames(defaultcss.all, sty.box__gNrOk, {
                [sty.box__loading_isLoading__gNrOk9WKv]: hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                )
              })}
            >
              <p.PlasmicSlot
                defaultContents={"TrueHoop"}
                value={args.companyName}
                className={classNames(sty.slotCompanyName, {
                  [sty.slotCompanyName__loading_isLoading]: hasVariant(
                    variants,
                    "loading",
                    "isLoading"
                  )
                })}
              />
            </div>
          ) : null}
          {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
            <div
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.box__pNbqH,
                {
                  [sty.box__loading_isLoading__pNbqH9WKv]: hasVariant(
                    variants,
                    "loading",
                    "isLoading"
                  )
                }
              )}
            >
              {"."}
            </div>
          ) : null}
        </p.Stack>

        {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
          <img
            data-plasmic-name={"companyAvatar"}
            data-plasmic-override={overrides.companyAvatar}
            alt={""}
            className={classNames(defaultcss.img, sty.companyAvatar, {
              [sty.companyAvatar__loading_isLoading]: hasVariant(
                variants,
                "loading",
                "isLoading"
              )
            })}
            role={"img"}
            src={args.companyAvatar !== undefined ? args.companyAvatar : ""}
          />
        ) : null}
        {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
          <div
            className={classNames(defaultcss.all, sty.box__tXcIk, {
              [sty.box__loading_isLoading__tXcIk9WKv]: hasVariant(
                variants,
                "loading",
                "isLoading"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={"TrueHoop"}
              value={args.companyName2}
              className={classNames(sty.slotCompanyName2, {
                [sty.slotCompanyName2__loading_isLoading]: hasVariant(
                  variants,
                  "loading",
                  "isLoading"
                )
              })}
            />
          </div>
        ) : null}
        {(hasVariant(variants, "loading", "isLoading") ? false : true) ? (
          <div
            className={classNames(defaultcss.all, sty.box__mO7Te, {
              [sty.box__loading_isLoading__mO7Te9WKv]: hasVariant(
                variants,
                "loading",
                "isLoading"
              )
            })}
          >
            <p.PlasmicSlot
              defaultContents={
                "Award-winning hard truths about the NBA since 2005"
              }
              value={args.companyDescription}
              className={classNames(sty.slotCompanyDescription)}
            />
          </div>
        ) : null}
      </div>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__fTzd5)}
      >
        <div
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.box__q6Vgc
          )}
        >
          {"Powered by"}
        </div>

        <p.PlasmicLink
          data-plasmic-name={"link"}
          data-plasmic-override={overrides.link}
          className={classNames(
            defaultcss.all,
            defaultcss.__wab_text,
            sty.link
          )}
          component={Link}
          href={"https://venturemark.co/"}
          platform={"nextjs"}
        >
          {"Venturemark"}
        </p.PlasmicLink>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "companyAvatar", "link"],
  companyAvatar: ["companyAvatar"],
  link: ["link"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicAcceptInvite__ArgProps,
      internalVariantPropNames: PlasmicAcceptInvite__VariantProps
    });

    return PlasmicAcceptInvite__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicAcceptInvite";
  } else {
    func.displayName = `PlasmicAcceptInvite.${nodeName}`;
  }
  return func;
}

export const PlasmicAcceptInvite = Object.assign(
  // Top-level PlasmicAcceptInvite renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    companyAvatar: makeNodeComponent("companyAvatar"),
    link: makeNodeComponent("link"),
    // Metadata about props expected for PlasmicAcceptInvite
    internalVariantProps: PlasmicAcceptInvite__VariantProps,
    internalArgProps: PlasmicAcceptInvite__ArgProps
  }
);

export default PlasmicAcceptInvite;
/* prettier-ignore-end */
