// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: wB9ZqI-HxA
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import IconButton from "../../IconButton"; // plasmic-import: 4ntWB_3tm2/component
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicActionBar.module.css"; // plasmic-import: wB9ZqI-HxA/css
import IconAudienceIcon from "./icons/PlasmicIcon__IconAudience"; // plasmic-import: zICM6YbRr4/icon
import IconAskIcon from "./icons/PlasmicIcon__IconAsk"; // plasmic-import: 36OPIllke4/icon
import IconMetricIcon from "./icons/PlasmicIcon__IconMetric"; // plasmic-import: -jtIQQh_Az/icon
import IconEmailIcon from "./icons/PlasmicIcon__IconEmail"; // plasmic-import: raLc9YcB2e/icon
import IconCancelIcon from "./icons/PlasmicIcon__IconCancel"; // plasmic-import: VZwn0H7x-/icon
import IconAcceptIcon from "./icons/PlasmicIcon__IconAccept"; // plasmic-import: eTu0Yr98L9/icon

export const PlasmicActionBar__VariantProps = new Array("state");

export const PlasmicActionBar__ArgProps = new Array();

function PlasmicActionBar__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_ask]: hasVariant(variants, "state", "ask"),
        [sty.root__state_audience]: hasVariant(variants, "state", "audience"),
        [sty.root__state_metric]: hasVariant(variants, "state", "metric"),
      })}
    >
      <IconButton
        data-plasmic-name={"audienceButton"}
        data-plasmic-override={overrides.audienceButton}
        className={classNames("__wab_instance", sty.audienceButton, {
          [sty.audienceButton__state_audience]: hasVariant(
            variants,
            "state",
            "audience"
          ),

          [sty.audienceButton__state_metric]: hasVariant(
            variants,
            "state",
            "metric"
          ),
        })}
        startIcon={
          <IconAudienceIcon
            className={classNames(defaultcss.all, sty.svg__lrQHe)}
            role={"img"}
          />
        }
        withIcons={["start"]}
      />

      {(
        hasVariant(variants, "state", "ask")
          ? false
          : hasVariant(variants, "state", "metric")
          ? false
          : hasVariant(variants, "state", "audience")
          ? false
          : true
      ) ? (
        <p.Stack
          as={"div"}
          hasGap={true}
          className={classNames(defaultcss.all, sty.box__fnoNu, {
            [sty.box__state_ask__fnoNUxwrgP]: hasVariant(
              variants,
              "state",
              "ask"
            ),

            [sty.box__state_audience__fnoNUf5Gde]: hasVariant(
              variants,
              "state",
              "audience"
            ),

            [sty.box__state_metric__fnoNUoOszN]: hasVariant(
              variants,
              "state",
              "metric"
            ),
          })}
        >
          <IconButton
            data-plasmic-name={"askButton"}
            data-plasmic-override={overrides.askButton}
            className={classNames("__wab_instance", sty.askButton)}
            startIcon={
              <IconAskIcon
                className={classNames(defaultcss.all, sty.svg___2VkeB)}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />

          <IconButton
            data-plasmic-name={"metricButton"}
            data-plasmic-override={overrides.metricButton}
            className={classNames("__wab_instance", sty.metricButton, {
              [sty.metricButton__state_audience]: hasVariant(
                variants,
                "state",
                "audience"
              ),

              [sty.metricButton__state_metric]: hasVariant(
                variants,
                "state",
                "metric"
              ),
            })}
            startIcon={
              <IconMetricIcon
                className={classNames(defaultcss.all, sty.svg__jOjXs)}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />
        </p.Stack>
      ) : null}
      {(
        hasVariant(variants, "state", "ask")
          ? true
          : hasVariant(variants, "state", "metric")
          ? true
          : hasVariant(variants, "state", "audience")
          ? true
          : false
      ) ? (
        <p.Stack
          as={"form"}
          data-plasmic-name={"formContainer"}
          data-plasmic-override={overrides.formContainer}
          hasGap={true}
          className={classNames(defaultcss.all, sty.formContainer, {
            [sty.formContainer__state_ask]: hasVariant(
              variants,
              "state",
              "ask"
            ),

            [sty.formContainer__state_audience]: hasVariant(
              variants,
              "state",
              "audience"
            ),

            [sty.formContainer__state_metric]: hasVariant(
              variants,
              "state",
              "metric"
            ),
          })}
        >
          {(hasVariant(variants, "state", "audience") ? true : false) ? (
            <div
              data-plasmic-name={"audienceSelect"}
              data-plasmic-override={overrides.audienceSelect}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.audienceSelect,
                {
                  [sty.audienceSelect__state_ask]: hasVariant(
                    variants,
                    "state",
                    "ask"
                  ),

                  [sty.audienceSelect__state_audience]: hasVariant(
                    variants,
                    "state",
                    "audience"
                  ),

                  [sty.audienceSelect__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                }
              )}
            >
              {hasVariant(variants, "state", "audience")
                ? "Select Audience"
                : "ASK"}
            </div>
          ) : null}
          {(
            hasVariant(variants, "state", "ask")
              ? true
              : hasVariant(variants, "state", "audience")
              ? false
              : false
          ) ? (
            <div
              data-plasmic-name={"askSelect"}
              data-plasmic-override={overrides.askSelect}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.askSelect,
                {
                  [sty.askSelect__state_ask]: hasVariant(
                    variants,
                    "state",
                    "ask"
                  ),

                  [sty.askSelect__state_audience]: hasVariant(
                    variants,
                    "state",
                    "audience"
                  ),

                  [sty.askSelect__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                }
              )}
            >
              {hasVariant(variants, "state", "ask")
                ? "Select Ask"
                : hasVariant(variants, "state", "audience")
                ? "Select Audience"
                : "ASK"}
            </div>
          ) : null}
          {(
            hasVariant(variants, "state", "ask")
              ? false
              : hasVariant(variants, "state", "audience")
              ? false
              : true
          ) ? (
            <div
              data-plasmic-name={"metricSelect"}
              data-plasmic-override={overrides.metricSelect}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.metricSelect,
                {
                  [sty.metricSelect__state_ask]: hasVariant(
                    variants,
                    "state",
                    "ask"
                  ),

                  [sty.metricSelect__state_audience]: hasVariant(
                    variants,
                    "state",
                    "audience"
                  ),

                  [sty.metricSelect__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                }
              )}
            >
              {hasVariant(variants, "state", "metric")
                ? "Select Metric"
                : "WHAT:"}
            </div>
          ) : null}
        </p.Stack>
      ) : null}

      <p.Stack
        as={"div"}
        hasGap={
          hasVariant(variants, "state", "audience") ||
          hasVariant(variants, "state", "metric") ||
          hasVariant(variants, "state", "ask")
            ? true
            : false
        }
        className={classNames(defaultcss.all, sty.box__w7Ees, {
          [sty.box__state_ask__w7EesxwrgP]: hasVariant(
            variants,
            "state",
            "ask"
          ),

          [sty.box__state_audience__w7Eesf5Gde]: hasVariant(
            variants,
            "state",
            "audience"
          ),

          [sty.box__state_metric__w7EesoOszN]: hasVariant(
            variants,
            "state",
            "metric"
          ),
        })}
      >
        {(
          hasVariant(variants, "state", "ask")
            ? false
            : hasVariant(variants, "state", "metric")
            ? false
            : hasVariant(variants, "state", "audience")
            ? false
            : true
        ) ? (
          <IconButton
            data-plasmic-name={"publishEmail"}
            data-plasmic-override={overrides.publishEmail}
            className={classNames("__wab_instance", sty.publishEmail, {
              [sty.publishEmail__state_ask]: hasVariant(
                variants,
                "state",
                "ask"
              ),

              [sty.publishEmail__state_audience]: hasVariant(
                variants,
                "state",
                "audience"
              ),

              [sty.publishEmail__state_metric]: hasVariant(
                variants,
                "state",
                "metric"
              ),
            })}
            startIcon={
              <IconEmailIcon
                className={classNames(defaultcss.all, sty.svg__gr8N4)}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />
        ) : null}
        {(
          hasVariant(variants, "state", "ask")
            ? true
            : hasVariant(variants, "state", "metric")
            ? true
            : hasVariant(variants, "state", "audience")
            ? true
            : false
        ) ? (
          <IconButton
            data-plasmic-name={"cancelAction"}
            data-plasmic-override={overrides.cancelAction}
            className={classNames("__wab_instance", sty.cancelAction, {
              [sty.cancelAction__state_ask]: hasVariant(
                variants,
                "state",
                "ask"
              ),

              [sty.cancelAction__state_audience]: hasVariant(
                variants,
                "state",
                "audience"
              ),

              [sty.cancelAction__state_metric]: hasVariant(
                variants,
                "state",
                "metric"
              ),
            })}
            startIcon={
              <p.PlasmicIcon
                PlasmicIconType={
                  hasVariant(variants, "state", "ask")
                    ? IconCancelIcon
                    : hasVariant(variants, "state", "metric")
                    ? IconCancelIcon
                    : hasVariant(variants, "state", "audience")
                    ? IconCancelIcon
                    : IconAudienceIcon
                }
                className={classNames(defaultcss.all, sty.svg__h7RvY, {
                  [sty.svg__state_ask__h7RvYxwrgP]: hasVariant(
                    variants,
                    "state",
                    "ask"
                  ),

                  [sty.svg__state_audience__h7RvYf5Gde]: hasVariant(
                    variants,
                    "state",
                    "audience"
                  ),

                  [sty.svg__state_metric__h7RvYoOszN]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                })}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />
        ) : null}
        {(
          hasVariant(variants, "state", "ask")
            ? true
            : hasVariant(variants, "state", "metric")
            ? true
            : hasVariant(variants, "state", "audience")
            ? true
            : false
        ) ? (
          <IconButton
            data-plasmic-name={"acceptAction"}
            data-plasmic-override={overrides.acceptAction}
            className={classNames("__wab_instance", sty.acceptAction, {
              [sty.acceptAction__state_ask]: hasVariant(
                variants,
                "state",
                "ask"
              ),

              [sty.acceptAction__state_audience]: hasVariant(
                variants,
                "state",
                "audience"
              ),

              [sty.acceptAction__state_metric]: hasVariant(
                variants,
                "state",
                "metric"
              ),
            })}
            startIcon={
              <p.PlasmicIcon
                PlasmicIconType={
                  hasVariant(variants, "state", "ask")
                    ? IconAcceptIcon
                    : hasVariant(variants, "state", "metric")
                    ? IconAcceptIcon
                    : hasVariant(variants, "state", "audience")
                    ? IconAcceptIcon
                    : IconAudienceIcon
                }
                className={classNames(defaultcss.all, sty.svg__uGeRb, {
                  [sty.svg__state_ask__uGeRbxwrgP]: hasVariant(
                    variants,
                    "state",
                    "ask"
                  ),

                  [sty.svg__state_audience__uGeRbf5Gde]: hasVariant(
                    variants,
                    "state",
                    "audience"
                  ),

                  [sty.svg__state_metric__uGeRboOszN]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                })}
                role={"img"}
              />
            }
            withIcons={["start"]}
          />
        ) : null}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "audienceButton",
    "askButton",
    "metricButton",
    "formContainer",
    "audienceSelect",
    "askSelect",
    "metricSelect",
    "publishEmail",
    "cancelAction",
    "acceptAction",
  ],

  audienceButton: ["audienceButton"],
  askButton: ["askButton"],
  metricButton: ["metricButton"],
  formContainer: [
    "formContainer",
    "audienceSelect",
    "askSelect",
    "metricSelect",
  ],

  audienceSelect: ["audienceSelect"],
  askSelect: ["askSelect"],
  metricSelect: ["metricSelect"],
  publishEmail: ["publishEmail"],
  cancelAction: ["cancelAction"],
  acceptAction: ["acceptAction"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionBar__ArgProps,
      internalVariantPropNames: PlasmicActionBar__VariantProps,
    });

    return PlasmicActionBar__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicActionBar";
  } else {
    func.displayName = `PlasmicActionBar.${nodeName}`;
  }
  return func;
}

export const PlasmicActionBar = Object.assign(
  // Top-level PlasmicActionBar renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    audienceButton: makeNodeComponent("audienceButton"),
    askButton: makeNodeComponent("askButton"),
    metricButton: makeNodeComponent("metricButton"),
    formContainer: makeNodeComponent("formContainer"),
    audienceSelect: makeNodeComponent("audienceSelect"),
    askSelect: makeNodeComponent("askSelect"),
    metricSelect: makeNodeComponent("metricSelect"),
    publishEmail: makeNodeComponent("publishEmail"),
    cancelAction: makeNodeComponent("cancelAction"),
    acceptAction: makeNodeComponent("acceptAction"),
    // Metadata about props expected for PlasmicActionBar
    internalVariantProps: PlasmicActionBar__VariantProps,
    internalArgProps: PlasmicActionBar__ArgProps,
  }
);

export default PlasmicActionBar;
/* prettier-ignore-end */
