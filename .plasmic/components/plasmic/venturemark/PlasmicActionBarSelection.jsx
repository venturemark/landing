// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: LVHxqJ-yrV
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicActionBarSelection.module.css"; // plasmic-import: LVHxqJ-yrV/css
import Icon14Icon from "./icons/PlasmicIcon__Icon14"; // plasmic-import: c84MUP179h/icon
import IconAudienceIcon from "./icons/PlasmicIcon__IconAudience"; // plasmic-import: zICM6YbRr4/icon
import IconMetricIcon from "./icons/PlasmicIcon__IconMetric"; // plasmic-import: -jtIQQh_Az/icon
import IconAskIcon from "./icons/PlasmicIcon__IconAsk"; // plasmic-import: 36OPIllke4/icon
import IconCancelIcon from "./icons/PlasmicIcon__IconCancel"; // plasmic-import: VZwn0H7x-/icon

export const PlasmicActionBarSelection__VariantProps = new Array("type");

export const PlasmicActionBarSelection__ArgProps = new Array("name");

function PlasmicActionBarSelection__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"actionBarSelection"}
      data-plasmic-override={overrides.actionBarSelection}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.all,
        projectcss.root_reset,
        sty.actionBarSelection,
        {
          [sty.actionBarSelection__type_ask]: hasVariant(
            variants,
            "type",
            "ask"
          ),

          [sty.actionBarSelection__type_audience]: hasVariant(
            variants,
            "type",
            "audience"
          ),

          [sty.actionBarSelection__type_metric]: hasVariant(
            variants,
            "type",
            "metric"
          )
        }
      )}
    >
      <p.PlasmicIcon
        data-plasmic-name={"svg"}
        data-plasmic-override={overrides.svg}
        PlasmicIconType={
          hasVariant(variants, "type", "ask")
            ? IconAskIcon
            : hasVariant(variants, "type", "metric")
            ? IconMetricIcon
            : hasVariant(variants, "type", "audience")
            ? IconAudienceIcon
            : Icon14Icon
        }
        className={classNames(defaultcss.all, sty.svg, {
          [sty.svg__type_ask]: hasVariant(variants, "type", "ask"),
          [sty.svg__type_audience]: hasVariant(variants, "type", "audience"),
          [sty.svg__type_metric]: hasVariant(variants, "type", "metric")
        })}
        role={"img"}
      />

      <p.PlasmicSlot
        defaultContents={"Investors"}
        value={args.name}
        className={classNames(sty.slotName, {
          [sty.slotName__type_ask]: hasVariant(variants, "type", "ask"),
          [sty.slotName__type_audience]: hasVariant(
            variants,
            "type",
            "audience"
          ),

          [sty.slotName__type_metric]: hasVariant(variants, "type", "metric")
        })}
      />

      <IconCancelIcon
        data-plasmic-name={"_delete"}
        data-plasmic-override={overrides._delete}
        className={classNames(defaultcss.all, sty._delete, {
          [sty._delete__type_audience]: hasVariant(variants, "type", "audience")
        })}
        role={"img"}
      />
    </div>
  );
}

const PlasmicDescendants = {
  actionBarSelection: ["actionBarSelection", "svg", "_delete"],
  svg: ["svg"],
  _delete: ["_delete"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicActionBarSelection__ArgProps,
      internalVariantPropNames: PlasmicActionBarSelection__VariantProps
    });

    return PlasmicActionBarSelection__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "actionBarSelection") {
    func.displayName = "PlasmicActionBarSelection";
  } else {
    func.displayName = `PlasmicActionBarSelection.${nodeName}`;
  }
  return func;
}

export const PlasmicActionBarSelection = Object.assign(
  // Top-level PlasmicActionBarSelection renders the root element
  makeNodeComponent("actionBarSelection"),
  {
    // Helper components rendering sub-elements
    svg: makeNodeComponent("svg"),
    _delete: makeNodeComponent("_delete"),
    // Metadata about props expected for PlasmicActionBarSelection
    internalVariantProps: PlasmicActionBarSelection__VariantProps,
    internalArgProps: PlasmicActionBarSelection__ArgProps
  }
);

export default PlasmicActionBarSelection;
/* prettier-ignore-end */
