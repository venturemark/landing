// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: AjWb9YfCceP
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import { useScreenVariants } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: 56c3647f-e651-4dbb-a83a-6988a6e19d16/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicUpdate.module.css"; // plasmic-import: AjWb9YfCceP/css
import IconAttentionIcon from "./icons/PlasmicIcon__IconAttention"; // plasmic-import: JiGnSt4Vsj/icon
import IconMetricIcon from "./icons/PlasmicIcon__IconMetric"; // plasmic-import: -jtIQQh_Az/icon
import IconAskIcon from "./icons/PlasmicIcon__IconAsk"; // plasmic-import: 36OPIllke4/icon
import IconClockIcon from "./icons/PlasmicIcon__IconClock"; // plasmic-import: md99BMH18R/icon

export const PlasmicUpdate__VariantProps = new Array("state");

export const PlasmicUpdate__ArgProps = new Array("name", "date");

function PlasmicUpdate__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariants(),
  });

  return (
    <p.Stack
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__state_ask]: hasVariant(variants, "state", "ask"),
        [sty.root__state_metric]: hasVariant(variants, "state", "metric"),
      })}
    >
      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__eh4J9, {
          [sty.box__state_metric__eh4J9AgOx5]: hasVariant(
            variants,
            "state",
            "metric"
          ),
        })}
      >
        <div className={classNames(defaultcss.all, sty.box___1MzIo)}>
          <img
            data-plasmic-name={"avatar"}
            data-plasmic-override={overrides.avatar}
            alt={""}
            className={classNames(defaultcss.img, sty.avatar, {
              [sty.avatar__state_ask]: hasVariant(variants, "state", "ask"),
              [sty.avatar__state_metric]: hasVariant(
                variants,
                "state",
                "metric"
              ),
            })}
            role={"img"}
            src={
              "https://pbs.twimg.com/profile_images/1027401107708858368/FNZP7TEE_400x400.jpg"
            }
          />
        </div>

        {(hasVariant(variants, "state", "metric") ? true : false) ? (
          <div
            className={classNames(defaultcss.all, sty.box__zDUiC, {
              [sty.box__state_metric__zDUiCagOx5]: hasVariant(
                variants,
                "state",
                "metric"
              ),
            })}
          >
            <div
              data-plasmic-name={"value"}
              data-plasmic-override={overrides.value}
              className={classNames(
                defaultcss.all,
                defaultcss.__wab_text,
                sty.value,
                {
                  [sty.value__state_metric]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                }
              )}
            >
              {hasVariant(variants, "state", "metric") ? "27" : "+ 27"}
            </div>
          </div>
        ) : null}

        <div className={classNames(defaultcss.all, sty.box__opwqh)} />
      </p.Stack>

      <p.Stack
        as={"div"}
        hasGap={true}
        className={classNames(defaultcss.all, sty.box__tXl0Y, {
          [sty.box__state_ask__tXl0Y5WCo1]: hasVariant(
            variants,
            "state",
            "ask"
          ),

          [sty.box__state_metric__tXl0YagOx5]: hasVariant(
            variants,
            "state",
            "metric"
          ),
        })}
      >
        <div
          className={classNames(defaultcss.all, sty.box__y5CAn, {
            [sty.box__state_ask__y5CAn5WCo1]: hasVariant(
              variants,
              "state",
              "ask"
            ),

            [sty.box__state_metric__y5CAnagOx5]: hasVariant(
              variants,
              "state",
              "metric"
            ),
          })}
        >
          <div
            data-plasmic-name={"textContainer"}
            data-plasmic-override={overrides.textContainer}
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.textContainer,
              {
                [sty.textContainer__state_ask]: hasVariant(
                  variants,
                  "state",
                  "ask"
                ),

                [sty.textContainer__state_metric]: hasVariant(
                  variants,
                  "state",
                  "metric"
                ),
              }
            )}
          >
            {
              "How does this feel to create updates?\n\nWe have a character limit in this box. Updates can't be too long.\n\nBut at least it can be long enough to capture a full idea.\n\nsdfsdfsfsfsfsdfsd\n\n\n\n\nsdfsdfsdfsdfsd"
            }
          </div>
        </div>

        {(hasVariant(variants, "state", "metric") ? true : true) ? (
          <div
            className={classNames(defaultcss.all, sty.box__poHhz, {
              [sty.box__state_metric__poHhzagOx5]: hasVariant(
                variants,
                "state",
                "metric"
              ),
            })}
          >
            {(hasVariant(variants, "state", "metric") ? true : true) ? (
              <p.Stack
                as={"div"}
                hasGap={true}
                className={classNames(defaultcss.all, sty.box__pVRd7, {
                  [sty.box__state_metric__pVRd7AgOx5]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                })}
              >
                <p.PlasmicIcon
                  PlasmicIconType={
                    hasVariant(variants, "state", "ask")
                      ? IconAskIcon
                      : hasVariant(variants, "state", "metric")
                      ? IconMetricIcon
                      : IconAttentionIcon
                  }
                  className={classNames(defaultcss.all, sty.svg__eBZ, {
                    [sty.svg__state_ask__eBZ5WCo1]: hasVariant(
                      variants,
                      "state",
                      "ask"
                    ),

                    [sty.svg__state_metric__eBZagOx5]: hasVariant(
                      variants,
                      "state",
                      "metric"
                    ),
                  })}
                  role={"img"}
                />

                <div
                  className={classNames(defaultcss.all, sty.box___9JDn, {
                    [sty.box__state_ask___9JDn5WCo1]: hasVariant(
                      variants,
                      "state",
                      "ask"
                    ),

                    [sty.box__state_metric___9JDnagOx5]: hasVariant(
                      variants,
                      "state",
                      "metric"
                    ),
                  })}
                >
                  <p.PlasmicSlot defaultContents={"Ask"} value={args.name} />
                </div>
              </p.Stack>
            ) : null}

            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__x4KLb, {
                [sty.box__state_metric__x4KLBagOx5]: hasVariant(
                  variants,
                  "state",
                  "metric"
                ),
              })}
            >
              <p.PlasmicIcon
                PlasmicIconType={
                  hasVariant(variants, "state", "metric")
                    ? IconClockIcon
                    : IconClockIcon
                }
                className={classNames(defaultcss.all, sty.svg__gJqjW, {
                  [sty.svg__state_ask__gJqjW5WCo1]: hasVariant(
                    variants,
                    "state",
                    "ask"
                  ),

                  [sty.svg__state_metric__gJqjWagOx5]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                })}
                role={"img"}
              />

              <div
                className={classNames(defaultcss.all, sty.box__lxcgw, {
                  [sty.box__state_metric__lxcgwagOx5]: hasVariant(
                    variants,
                    "state",
                    "metric"
                  ),
                })}
              >
                <p.PlasmicSlot
                  defaultContents={"14 hours ago"}
                  value={args.date}
                />
              </div>
            </p.Stack>
          </div>
        ) : null}
      </p.Stack>
    </p.Stack>
  );
}

const PlasmicDescendants = {
  root: ["root", "avatar", "value", "textContainer"],
  avatar: ["avatar"],
  value: ["value"],
  textContainer: ["textContainer"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUpdate__ArgProps,
      internalVariantPropNames: PlasmicUpdate__VariantProps,
    });

    return PlasmicUpdate__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpdate";
  } else {
    func.displayName = `PlasmicUpdate.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdate = Object.assign(
  // Top-level PlasmicUpdate renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    avatar: makeNodeComponent("avatar"),
    value: makeNodeComponent("value"),
    textContainer: makeNodeComponent("textContainer"),
    // Metadata about props expected for PlasmicUpdate
    internalVariantProps: PlasmicUpdate__VariantProps,
    internalArgProps: PlasmicUpdate__ArgProps,
  }
);

export default PlasmicUpdate;
/* prettier-ignore-end */
