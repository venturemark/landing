// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: nqKXpmm91O
import * as React from "react";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicLandingInput.module.css"; // plasmic-import: nqKXpmm91O/css

export const PlasmicLandingInput__VariantProps = new Array(
  "addedToWaitlist",
  "size",
  "color"
);

export const PlasmicLandingInput__ArgProps = new Array();

function PlasmicLandingInput__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (hasVariant(variants, "addedToWaitlist", "added") ? false : true) ? (
    <input
      data-plasmic-name={"emailAddress"}
      data-plasmic-override={overrides.emailAddress}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        defaultcss.input,
        projectcss.root_reset,
        sty.emailAddress,
        {
          [sty.emailAddress__addedToWaitlist_added]: hasVariant(
            variants,
            "addedToWaitlist",
            "added"
          ),

          [sty.emailAddress__color_dark]: hasVariant(variants, "color", "dark"),
          [sty.emailAddress__size_large]: hasVariant(variants, "size", "large"),
        }
      )}
      placeholder={"Your E-mail"}
      size={1}
      type={"text"}
    />
  ) : null;
}

const PlasmicDescendants = {
  emailAddress: ["emailAddress"],
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicLandingInput__ArgProps,
      internalVariantPropNames: PlasmicLandingInput__VariantProps,
    });

    return PlasmicLandingInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "emailAddress") {
    func.displayName = "PlasmicLandingInput";
  } else {
    func.displayName = `PlasmicLandingInput.${nodeName}`;
  }
  return func;
}

export const PlasmicLandingInput = Object.assign(
  // Top-level PlasmicLandingInput renders the root element
  makeNodeComponent("emailAddress"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicLandingInput
    internalVariantProps: PlasmicLandingInput__VariantProps,
    internalArgProps: PlasmicLandingInput__ArgProps,
  }
);

export default PlasmicLandingInput;
/* prettier-ignore-end */
