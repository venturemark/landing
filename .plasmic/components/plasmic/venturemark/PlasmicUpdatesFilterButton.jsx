// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: mSMs7FqGjFMPgGjdzmbmrV
// Component: CrXPeq_3J2
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_venturemark.module.css"; // plasmic-import: mSMs7FqGjFMPgGjdzmbmrV/projectcss
import sty from "./PlasmicUpdatesFilterButton.module.css"; // plasmic-import: CrXPeq_3J2/css

export const PlasmicUpdatesFilterButton__VariantProps = new Array("isSelected");

export const PlasmicUpdatesFilterButton__ArgProps = new Array("children");

function PlasmicUpdatesFilterButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root, {
        [sty.root__isSelected_selected]: hasVariant(
          variants,
          "isSelected",
          "selected"
        )
      })}
    >
      <p.PlasmicSlot
        defaultContents={"ALL"}
        value={args.children}
        className={classNames(sty.slotChildren, {
          [sty.slotChildren__isSelected_selected]: hasVariant(
            variants,
            "isSelected",
            "selected"
          )
        })}
      />
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicUpdatesFilterButton__ArgProps,
      internalVariantPropNames: PlasmicUpdatesFilterButton__VariantProps
    });

    return PlasmicUpdatesFilterButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicUpdatesFilterButton";
  } else {
    func.displayName = `PlasmicUpdatesFilterButton.${nodeName}`;
  }
  return func;
}

export const PlasmicUpdatesFilterButton = Object.assign(
  // Top-level PlasmicUpdatesFilterButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicUpdatesFilterButton
    internalVariantProps: PlasmicUpdatesFilterButton__VariantProps,
    internalArgProps: PlasmicUpdatesFilterButton__ArgProps
  }
);

export default PlasmicUpdatesFilterButton;
/* prettier-ignore-end */
